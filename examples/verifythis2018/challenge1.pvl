// -*- tab-width:2 ; indent-tabs-mode:nil -*-

//:: cases GapBuffer
//:: tools silicon
//:: suite medium
//:: verdict Pass

class GapBuffer {
	int[] a;
	int l;
	int r;
	
	static pure int Get(seq<int> xs, int n) = xs[n];
	
	requires n <= |xs|;
	static pure seq<int> Skip(seq<int> xs, int n) =
		0 < n ? Skip(tail(xs), n - 1) : xs;
		
	requires n <= |xs|;
	static pure seq<int> Take(seq<int> xs, int n) =
		0 < n ? seq<int> { head(xs) } + Take(tail(xs), n - 1) : seq<int> { };

	requires n <= |xs|;
	ensures n < 0 ==> |Skip(xs, n)| == |xs|;
	ensures 0 <= n ==> |Skip(xs, n)| == |xs| - n;
	void Lemma_Skip_length(seq<int> xs, int n) {
		if (0 < n) {
			Lemma_Skip_length(tail(xs), n - 1);
		} else {
			assert Skip(xs, n) == xs;
			assert |Skip(xs, n)| == |xs|;
		}
	}

	requires n <= |xs|;
	ensures n < 0 ==> |Take(xs, n)| == 0;
	ensures 0 <= n ==> |Take(xs, n)| == n;
	void Lemma_Take_length(seq<int> xs, int n) {
		if (0 < n) {
			Lemma_Take_length(tail(xs), n - 1);
		} else {
			assert Take(xs, n) == seq<int> { };
			assert |Take(xs, n)| == 0;
		}
	}

	requires n <= |xs|;
	ensures (\forall int i; 0 <= i && i < n; xs[i] == Get(Take(xs, n), i));
	void Lemma_Take_eq_pairwise(seq<int> xs, int n) {
		if (0 < n) {
			Lemma_Take_eq_pairwise(tail(xs), n - 1);
		}
	}

	requires 0 <= n && n <= |xs|;
	requires 0 <= i && i < |xs| - n;
	ensures xs[n + i] == Get(Skip(xs, n), i);
	void Lemma_Skip_eq(seq<int> xs, int n, int i) {
		if (0 < n) {
			Lemma_Skip_eq(tail(xs), n - 1, i);
		}
	}

	requires 0 <= n && n <= |xs|;
	ensures (\forall int i; 0 <= i && i < |xs| - n; xs[n + i] == Get(Skip(xs, n), i));
	void Lemma_Skip_eq_pairwise(seq<int> xs, int n) {
		int i = 0;
		
		loop_invariant 0 <= i && i <= |xs| - n;
		loop_invariant (\forall int j; 0 <= j && j < i; xs[n + j] == Get(Skip(xs, n), j));
		while (i < |xs| - n) {
			Lemma_Skip_eq(xs, n, i);
			i = i + 1;
		}
	}
	
	resource Represents(seq<int> contents) =
		Perm(l, 2/3) **
		Perm(r, 2/3) **
		Perm(a, 2/3) **
		a != null ** (\forall* int i; 0 <= i && i < a.length; Perm(a[i], write)) **
		0 <= l ** l <= r ** r < a.length **
		|contents| == a.length - (r - l) **
		(\forall int i ; 0 <= i && i < l ; a[i] == contents[i]) **
		(\forall int i ; r <= i && i < a.length; a[i] == contents[i - (r - l)]);
	
	GapBuffer(int[] arr, int l, int r) {
		this.a = arr;
		this.l = l;
		this.r = r;
	}
	
  given seq<int> contents;
	context Perm(l, 1/3) ** Perm(r, 1/3);
  context Represents(contents);
  void left() {
    unfold Represents(contents);
		
    if (l != 0) {
      l = l - 1;
      r = r - 1;
      a[r] = a[l];
    }
		
    fold Represents(contents);
  }

  given seq<int> contents;
	context Perm(l, 1/3) ** Perm(r, 1/3);
  context Represents(contents);
  void right() {
    unfold Represents(contents);
		
    if (r != a.length - 1) {
      a[l] = a[r];
      l = l + 1;
      r = r + 1;
    }
		
    fold Represents(contents);
  }
	
	given seq<int> contents;
	yields seq<int> newcontents;
	context Perm(l, 1/3);
	requires Represents(contents);
	ensures Represents(newcontents);
	ensures (\forall int i; 0 <= i && i < l; newcontents[i] == contents[i]);
	ensures 0 == \old(l) ==> (\forall int i; l <= i && i < |contents|; newcontents[i] == contents[i]);
	ensures 0 < \old(l) ==> (\forall int i; l <= i && i < |contents| - 1; newcontents[i] == contents[i + 1]);
	void delete() {
		unfold Represents(contents);
		newcontents = contents;
		
		if (l != 0) {
			l = l - 1;
			newcontents = Take(contents, l) + Skip(contents, l + 1);
			
			Lemma_Take_length(contents, l);
			Lemma_Skip_length(contents, l + 1);
			Lemma_Take_eq_pairwise(contents, l);
			Lemma_Skip_eq_pairwise(contents, l + 1);

			assert (\forall int i; l <= i && i < |newcontents|; newcontents[i] == Get(Skip(contents, l + 1), i - l));	
		}
		
		fold Represents(newcontents);
	}
	
	given seq<int> contents;
	context_everywhere Perm(l, 1/4) ** Perm(r, 1/3) ** Perm(a, 1/3) ** K > 0;
	context Represents(contents);
	ensures l < r;
	void grow(int K) {
		unfold Represents(contents);
		
		int[] b = new int[a.length + K];
		int i = 0;
		
		loop_invariant Perm(l, 2/3) ** Perm(r, 2/3) ** Perm(a, 2/3) ** a != null;
		loop_invariant (\forall* int j; 0 <= j && j < a.length; Perm(a[j], write));
		loop_invariant 0 <= i && i <= l;
		loop_invariant 0 <= l && l <= r && r < a.length;
		loop_invariant b.length == a.length + K;
		loop_invariant |contents| == a.length - (r - l);
		loop_invariant (\forall int j; 0 <= j && j < l ; a[j] == contents[j]);
		loop_invariant (\forall int j; r <= j && j < a.length; a[j] == contents[j - (r - l)]);
		loop_invariant (\forall* int j; 0 <= j && j < b.length; Perm(b[j], write));
		loop_invariant (\forall int j; 0 <= j && j < i; b[j] == contents[j]);
		while (i < l) {
			b[i] = a[i];
			i = i + 1;
		}
		
		i = r;
		
		loop_invariant Perm(l, 2/3) ** Perm(r, 2/3) ** Perm(a, 2/3) ** a != null;
		loop_invariant (\forall* int j; 0 <= j && j < a.length; Perm(a[j], write));
		loop_invariant r <= i && i <= a.length;
		loop_invariant 0 <= l && l <= r && r < a.length;
		loop_invariant r <= i+K && i+K <= b.length;
		loop_invariant b.length == a.length + K;
		loop_invariant |contents| == a.length - (r - l);
		loop_invariant (\forall int j; r <= j && j < a.length; a[j] == contents[j - (r - l)]);
		loop_invariant (\forall* int j; 0 <= j && j < b.length; Perm(b[j], write));
		loop_invariant (\forall int j; 0 <= j && j < l; b[j] == contents[j]);
		loop_invariant (\forall int j; r <= j && j < i; b[j + K] == contents[j - (r - l)]);
		while (i < a.length) {
			b[i + K] = a[i];
			i = i + 1;
		}

		a = b;
		r = r + K;

		fold Represents(contents);
	}
	
	given seq<int> contents;
	yields seq<int> newcontents;
	context_everywhere Perm(l, 1/3) ** Perm(r, 1/3) ** Perm(a, 1/3) ** K > 0;
	requires Represents(contents);
	ensures Represents(newcontents);
	ensures |newcontents| == |contents| + 1;
	ensures (\forall int j; 0 <= j && j < \old(l); contents[j] == newcontents[j]);
	ensures newcontents[\old(l)] == x;
	ensures (\forall int i; \old(l) < i && i < |newcontents|; newcontents[i] == contents[i - 1]);
	void insert(int x, int K) {
		if (l == r) {
			grow(K) with { contents = contents; };
			unfold Represents(contents);
			a[l] = x;
			l = l + 1;
		}
		else {
			unfold Represents(contents);
			a[l] = x;
			l = l + 1;
		}
		
		newcontents = Take(contents, l - 1) + seq<int> { x } + Skip(contents, l - 1);
		
		Lemma_Take_length(contents, l - 1);
		Lemma_Skip_length(contents, l - 1);
		Lemma_Take_eq_pairwise(contents, l - 1);
		Lemma_Skip_eq_pairwise(contents, l - 1);

		assert (\forall int i; l <= i && i < |newcontents|; newcontents[i] == Get(Skip(contents, l - 1), i - l));	
		fold Represents(newcontents);
	}
}
