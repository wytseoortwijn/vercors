// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases demo3a-funcW
//:: tools silicon
//:: verdict Pass

class ArraySum {
	int sum;
	
	
	/* ** Auxiliary definitions */
	
	requires 0 <= n;
	ensures |\result| == n;
	ensures (\forall int i; 0 <= i && i < |\result|; \result[i] == 0);
	pure seq<int> fresh(int n) = 0 < n ? seq<int> { 0 } + fresh(n - 1) : seq<int> { };
	
	requires 0 <= j && j < |xs|;
	ensures |\result| == |xs|;
	ensures \result[j] == v;
	ensures (\forall int i; 0 <= i && i < |\result| && i != j; \result[i] == xs[i]);
	pure seq<int> update(seq<int> xs, int j, int v) =
		0 < j ? seq<int> { head(xs) } + update(tail(xs), j - 1, v) : seq<int> { v } + tail(xs);
		
	pure int sum(seq<int> xs) = 0 < |xs| ? head(xs) + sum(tail(xs)) : 0;
	
	
	/* ** Lemmas */
	
	requires 0 <= i && i < |xs|;
	requires xs[i] == 0;
	ensures sum(update(xs, i, v)) == sum(xs) + v;
	void lemma_sum_update(seq<int> xs, int i, int v) {
		if (0 < i) {
			lemma_sum_update(tail(xs), i - 1, v);
			assert head(update(xs, i, v)) == head(xs);
			assert tail(update(xs, i, v)) == update(tail(xs), i - 1, v);
		}
		else {
			assert head(update(xs, i, v)) == v;
			assert tail(update(xs, i, v)) == tail(xs);
		}
	}
	
	requires 0 <= n;
	ensures sum(fresh(n)) == 0;
	void lemma_sum_fresh(int n) {
		if (0 < n) {
			lemma_sum_fresh(n - 1);
			assert head(fresh(n)) == 0;
			assert tail(fresh(n)) == fresh(n - 1);
		}
	}


	/* ** Implementation */

	yields seq<int> contrib;
	context_everywhere A != null;
	context (\forall* int i; 0 <= i && i < A.length; Perm(A[i], 1/2));
	context Perm(this.sum, write);
	ensures |contrib| == A.length;
	ensures (\forall int i; 0 <= i && i < |contrib|; contrib[i] == A[i]);
	ensures this.sum == sum(contrib);
	void sum(int[] A) {
		contrib = fresh(A.length); // ghost code
		lemma_sum_fresh(A.length); // ghost code
		
		this.sum = 0;
		
		context_everywhere inv(Perm(this.sum, 1) ** this.sum == sum(contrib))
		{
			par (int tid = 0 .. A.length)
				context Perm(A[tid], 1/2);
				context |contrib| == A.length;
				requires contrib[tid] == 0;
				ensures contrib[tid] == A[tid];
			{
				atomic(inv) {
					lemma_sum_update(contrib, tid, A[tid]); // ghost code
					contrib = update(contrib, tid, A[tid]); // ghost code
					
					this.sum = this.sum + A[tid];
				}
			}
		}
	}
}
