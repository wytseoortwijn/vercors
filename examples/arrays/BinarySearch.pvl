// -*- tab-width:2 ; indent-tabs-mode:nil -*-

//:: cases BinarySearch
//:: tools silicon
//:: suite medium
//:: verdict Pass

class BinarySearch {
	boolean found;

	// we require permissions for all shared memory involved
	context_everywhere items != null;
	context_everywhere Perm(this.found, write);
	context_everywhere (\forall* int j; 0 <= j && j < items.length; Perm(items[j], write));
	
	// 'items' is a sorted array
	context_everywhere (\forall int j; 0 <= j && j < items.length;
							(\forall int k; 0 <= k && k < items.length && j < k;
								items[j] <= items[k]));
	
	// if the algorithm indicates 'found', then 'value' must be in the array				
	ensures found ==> (0 <= \result && \result < items.length && items[\result] == value);
	
	// if the algorithm indicates 'not found', then 'value' does not occur in the array
	ensures (!found) ==> (\forall int j; 0 <= j && j < items.length; items[j] != value);
	
	// if the algorithm indicates 'not found', then the correct insertion point is returned
	ensures (!found) ==> 0 <= \result && \result <= items.length;
	ensures (!found) ==> (\forall int j; 0 <= j && j < \result; items[j] < value);
	ensures (!found) ==> (\forall int j; \result <= j && j < items.length; value < items[j]);
	int binarysearch(int[] items, int value) {
		int low = 0;
		int high = items.length - 1;
		int result = 0;
		
		found = false;
		
		loop_invariant 0 <= low && low <= items.length;
		loop_invariant -1 <= high && high < items.length;
		loop_invariant 0 <= result && result <= items.length;
		loop_invariant (\forall int j; 0 <= j && j < low; items[j] < value);
		loop_invariant (\forall int j; high < j && j < items.length; items[j] > value);
		loop_invariant found ==> 0 <= result && result < items.length;
		loop_invariant found ==> items[result] == value;
		while (low <= high && !found) {
			int mid = (low + high) / 2;
			assert 0 <= mid && mid < items.length; // 'mid' is a valid index in 'items'
			
			if (items[mid] > value) {
				high = mid - 1;
			}
			else {
				if (items[mid] < value) {
					low = mid + 1;
				}
				else {
					found = true;
					result = mid;
				}
			}
		}
		
		if (!found) {
			result = low;
		}
	
		return result;
	}
}