// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: case FloatDomain
//:: tools silicon
//:: suite problem-fail
//:: verdict Pass

domain Float {
    function zero() : Float
    function float(ref:Ref): Float
    function fsum(xs: Seq[Float]): Float
    function fadd(f1 : Float,f2:Float):Float
    
    axiom commutative_add {
        forall f1 : Float, f2 : Float :: fadd(f1,f2)==fadd(f2,f1)
    }
    
    axiom zero_sum {
        fsum(Seq[Float]())==zero()
    }
    
    axiom single_sum {
      forall xs : Seq[Float], i:Int :: (0 <= i && i < |xs|) ==> (fsum(xs[i..i+1]) == xs[i])
    }
    
    axiom append_sum {
      forall xs : Seq[Float], ys : Seq[Float] :: fsum(xs++ys) == fadd(fsum(xs),fsum(ys))
    }
}

method test(xs : Seq[Float]) {
    var fr1 : Ref
    var fr2 : Ref
    var f1 : Float
    var f2 : Float
    var N : Int
    var i : Int
    var S : Float
    
    fr1 := new()
    f1 := float(fr2)
    fr2 := new()
    f2 := float(fr2)
    
    assert fadd(f1,f2)==fadd(f2,f1);
    
    
    N := |xs|
    i := 0
    S := zero();
    
    assert xs[0..0] == Seq[Float]()
    
    assert  S == fsum(xs[0..0])
    
    
    while(i<|xs|)
      context_everywhere 0 <= i && i <= |xs|
      context_everywhere S == fsum(xs[0..i])
    {
      assert xs[0..i+1]==xs[0..i]++xs[i..i+1]
      //assert fsum(xs[0..i+1])==fadd(fsum(xs[0..i]),fsum(xs[i..i+1]))
      //assert fsum(xs[i..i+1])==xs[i]
      S := fadd(S,xs[i])
      i := i+1
    }
}



